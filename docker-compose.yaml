version: '3.9'

services:
  postgres:
    image: ${REGISTRY_URL}postgres:latest
    container_name: postgres_container
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres_password}
      POSTGRES_DB: postgres_db
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - ./pgdata:/var/lib/postgresql/data/pgdata
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 256M
        reservations:
          cpus: '0.125'
          memory: 128M
    command: >
      postgres -c max_connections=100
               -c shared_buffers=64MB
               -c effective_cache_size=128MB
               -c maintenance_work_mem=32MB
               -c checkpoint_completion_target=0.7
               -c wal_buffers=16MB
               -c default_statistics_target=100
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres_user -d postgres_db" ]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    tty: true
    stdin_open: true

  recipes:
    image: ${REGISTRY_URL}recipes:${RECIPES_TAG:-1.0.0}
    container_name: recipes
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres_password}
      DB_HOST: postgres
      RECIPES_PORT: ${RECIPES_PORT:-7000}
    ports:
      - ${RECIPES_PORT:-7000}:${RECIPES_PORT:-7000}
    volumes:
      - /usr/src/app/node_modules
    depends_on:
      - postgres
    restart: unless-stopped

  auth:
    image: ${REGISTRY_URL}auth:${AUTH_TAG:-1.0.0}
    container_name: auth
    environment:
      AUTH_PORT: ${AUTH_PORT:-6000}
    ports:
      - ${AUTH_PORT:-6000}:${AUTH_PORT:-6000}
    volumes:
      - /usr/src/app/node_modules
    depends_on:
      - postgres
    restart: unless-stopped


volumes:
  pgdata:
    driver: local